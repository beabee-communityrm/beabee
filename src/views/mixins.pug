mixin csrf
	input( type="hidden", name="_csrf", value=csrf )

mixin messageBlock( status, text )
	p( style="padding: 1em; margin-top: 1em;" class="bg-" + status )=text

mixin input( type, label, name, opts )
	unless opts
		- opts = {}
	unless opts.id
		- opts.id = name
	.form-group
		label( for=opts.id, class=( opts.left ? 'col-md-' + opts.left : 'col-md-2' ) ).control-label #{ label }
		div( class=( opts.right ? 'col-md-' + opts.right : 'col-md-3' ) )
			div( class=( opts.before || opts.after ? 'input-group' : null ) )
				if opts.before
					.input-group-addon=opts.before
				case type
					when 'password'
					when 'text'
					default
						input( name=name, type=type, value=opts.value, required=opts.required id=opts.id, readonly=opts.readonly, class=opts.class, minlength=opts.minlength, maxlength=opts.maxlength, placeholder=opts.placeholder, autocomplete=opts.autocomplete ).form-control
						- break
					when 'textarea'
						textarea( name=name, required=opts.required, id=opts.id, readonly=opts.readonly, rows=( opts.rows ? opts.rows : 4 ), class=opts.class, placeholder=opts.placeholder ).form-control #{ opts.value }
					when 'checkbox'
					when 'radio'
						- i = 0
						for text, value in opts.options
							- i++
							div( class=type )
								label( for=opts.id + "_" + i )
									input( name=name, type=type, value=value, required=opts.required, checked=( opts.value === true || value == opts.value ), id=opts.id + "_" + i )
									|  #{ text }
						- break
				if opts.after
					.input-group-addon=opts.after
			if opts.helpblock
				span.help-block #{ opts.helpblock }

mixin form_button( label, colour, opts )
	unless opts
		- opts = {}
	.form-group
		div( class=( opts.right ? 'col-md-' + opts.right : 'col-md-3' ), class=( opts.left ? 'col-md-offset-' + opts.left : 'col-md-offset-2' ) )
			button.btn( class="btn-" + ( colour ? colour : 'default' ) )=label

mixin page_header( title, opts )
	if ! opts
		- opts = {}
	if ! opts.level
		- opts.level = 'h3'
	.page-header
		if opts.strong
			#{ opts.level }
				strong #{ title }
				if opts.small
					small  #{ opts.small }
		else
			#{ opts.level } #{ title }
				if opts.small
					small  #{ opts.small }

mixin passwordRequirementsCSS
	link( rel="stylesheet", href="/static/css/password-requirements.css" )

mixin passwordRequirementsJS
	script( src="/static/js/password-requirements.js" )

mixin flash( status, text, opts )
	.alert( class='alert-' + status)=text
		if ( opts && opts.text && opts.url && opts.type )
			a( href=opts.url, style="margin-top:-.3em;margin-right:-.3em", class="btn-" + opts.type ).btn.btn-sm.pull-right=opts.text

mixin email( address, text=anull )
	a( href='mailto:' + address )= text || address

mixin emailSupport(text=null)
	+email(Options('support-email'), text)

mixin paramsInputs(params, namePrefix='params')
	each param in params
		- name = namePrefix + '[' + param.name + ']'
		.form-group
			label.col-md-3.control-label= param.label
			.col-md-6
				if param.type === 'select'
					select(name=name required disabled).form-control
						each value in param.values
							option(value=value[0])= value[1]
				else if param.type === 'boolean'
					.checkbox
						label
							input(type='checkbox' name=name value='true')
							| Yes
				else
					input(type=param.type name=name required disabled).form-control

mixin membersTableBasicInfo(member)
	span.members-table-action
		a(href='/members/' + member.id).btn.btn-xs.btn-default
			span(
				style='color: ' + (member.membership && member.membership.isActive ? 'green' : 'red')
				title=member.membership && member.membership.isActive ? 'Active' : 'Expired'
			).glyphicon.glyphicon-user
	span.members-table-row-main
		div.members-table-row-info
			if member.fullname
				span(style='flex: 0 1 250px')= member.fullname
			span= member.email
		small= member.profile.description
	span
		each tag in member.profile.tags
			if !search || tag !== search.tag
				|
				|
				a(href='/members/?type=basic&tag=' + encodeURIComponent(tag)).label.label-info.members-table-action= tag

mixin paymentStatus(payment)
	case payment.status
		when 'pending'
			span.label.label-default Pending
		when 'successful'
			span.label.label-primary Collected
		when 'failed'
			span.label.label-danger Failed
		when 'cancelled'
			span.label.label-danger Cancelled

mixin itemStatus(item)
	case item.status
		when 'draft'
			span.label.label-default Draft
		when 'scheduled'
			span.label.label-info Scheduled
		when 'open'
			span.label.label-success Open
		when 'ended'
			span.label.label-danger Ended
